{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"bash-core For reference, see API","title":"bash-core"},{"location":"#bash-core","text":"For reference, see API","title":"bash-core"},{"location":"api/","text":"bash-core Overview Core functions for any Bash program Index core.trap_add() core.trap_remove() core.shopt_push() core.shopt_pop() core.err_set() core.err_clear() core.err_exists() core.panic() core.print_stacktrace() core.print_error_fn() core.print_warn_fn() core.print_info_fn() core.print_die() core.print_error() core.print_warn() core.print_info() core.should_output_color() core.get_package_info() core.init() core.stacktrace_print() core.trap_add() Adds a handler for a particular trap signal or event. Noticably, unlike the 'builtin' trap, this does not override any other existing handlers Example some_handler() { printf '%s\\n' 'This was called on USR1! ^w^'; } core.trap_add 'some_handler' 'USR1' kill -USR1 $$ core.trap_remove 'some_handler' 'USR1' Arguments $1 (string): Function to execute on an event. Integers are forbiden $2 (string): Event signal core.trap_remove() Removes a handler for a particular trap signal or event. Currently, if the function doest not exist, it prints an error Example some_handler() { printf '%s\\n' 'This was called on USR1! ^w^'; } core.trap_add 'some_handler' 'USR1' kill -USR1 $$ core.trap_remove 'some_handler' 'USR1' Arguments $1 (string): Function to remove $2 (string): Signal that the function executed on core.shopt_push() Modifies current shell options and pushes information to stack, so it can later be easily undone. Note that it does not check to see if your Bash version supports the option Example core.shopt_push -s extglob [[ 'variable' == @(foxtrot|golf|echo|variable) ]] && printf '%s\\n' 'Woof!' core.shopt_pop Arguments $1 (string): Name of shopt action. Can either be -u or -s $2 (string): Name of shopt name core.shopt_pop() Modifies current shell options based on most recent item added to stack. Example core.shopt_push -s extglob [[ 'variable' == @(foxtrot|golf|echo|variable) ]] && printf '%s\\n' 'Woof!' core.shopt_pop Function has no arguments. core.err_set() Sets an error. Arguments $1 (Error): code $2 (Error): message Variables set number (ERRCODE): Error code string (ERR): Error message core.err_clear() Clears any of the global error state (sets to empty string). This means any core.err_exists calls after this will return 1 Function has no arguments. Variables set number (ERRCODE): Error code string (ERR): Error message core.err_exists() Checks if an error exists. If ERR is not empty, then an error does exist Function has no arguments. core.panic() Use when a serious fault occurs. It will print the current ERR (if it exists) core.print_stacktrace() Prints stacktrace Example err_handler() { local exit_code=$? core.print_stacktrace exit $exit_code } core.trap_add 'err_handler' ERR Function has no arguments. core.print_error_fn() Print an error message to standard error Arguments $1 (string): message core.print_warn_fn() Print a warning message to standard error Arguments $1 (string): message core.print_info_fn() Print an informative message to standard output Arguments $1 (string): message core.print_die() Print a error message to standard error and die Arguments $1 (string): message core.print_error() Print an error message to standard error Arguments $1 (string): message core.print_warn() Print a warning message to standard error Arguments $1 (string): message core.print_info() Print an informative message to standard output Arguments $1 (string): message core.should_output_color() (DEPRECATED). Determine if color should be printed. Note that this doesn't use tput because simple environment variable checking heuristics suffice. Deprecated because this code has been moved to bash-std core.get_package_info() (DEPRECATED) Gets information from a particular package. If the key does not exist, then the value is an empty string. Deprecated as this code has been moved to bash-std Arguments $1 (string): The $BASALT_PACKAGE_DIR of the caller Variables set directory (string): The full path to the directory core.init() (DEPRECATED) Initiates global variables used by other functions. Deprecated as this function is called automatically by functions that use global variables Function has no arguments. core.stacktrace_print() (DEPRECATED) Prints stacktrace See also core.print_stacktrace","title":"bash-core"},{"location":"api/#bash-core","text":"","title":"bash-core"},{"location":"api/#overview","text":"Core functions for any Bash program","title":"Overview"},{"location":"api/#index","text":"core.trap_add() core.trap_remove() core.shopt_push() core.shopt_pop() core.err_set() core.err_clear() core.err_exists() core.panic() core.print_stacktrace() core.print_error_fn() core.print_warn_fn() core.print_info_fn() core.print_die() core.print_error() core.print_warn() core.print_info() core.should_output_color() core.get_package_info() core.init() core.stacktrace_print()","title":"Index"},{"location":"api/#coretrap_add","text":"Adds a handler for a particular trap signal or event. Noticably, unlike the 'builtin' trap, this does not override any other existing handlers","title":"core.trap_add()"},{"location":"api/#example","text":"some_handler() { printf '%s\\n' 'This was called on USR1! ^w^'; } core.trap_add 'some_handler' 'USR1' kill -USR1 $$ core.trap_remove 'some_handler' 'USR1'","title":"Example"},{"location":"api/#arguments","text":"$1 (string): Function to execute on an event. Integers are forbiden $2 (string): Event signal","title":"Arguments"},{"location":"api/#coretrap_remove","text":"Removes a handler for a particular trap signal or event. Currently, if the function doest not exist, it prints an error","title":"core.trap_remove()"},{"location":"api/#example_1","text":"some_handler() { printf '%s\\n' 'This was called on USR1! ^w^'; } core.trap_add 'some_handler' 'USR1' kill -USR1 $$ core.trap_remove 'some_handler' 'USR1'","title":"Example"},{"location":"api/#arguments_1","text":"$1 (string): Function to remove $2 (string): Signal that the function executed on","title":"Arguments"},{"location":"api/#coreshopt_push","text":"Modifies current shell options and pushes information to stack, so it can later be easily undone. Note that it does not check to see if your Bash version supports the option","title":"core.shopt_push()"},{"location":"api/#example_2","text":"core.shopt_push -s extglob [[ 'variable' == @(foxtrot|golf|echo|variable) ]] && printf '%s\\n' 'Woof!' core.shopt_pop","title":"Example"},{"location":"api/#arguments_2","text":"$1 (string): Name of shopt action. Can either be -u or -s $2 (string): Name of shopt name","title":"Arguments"},{"location":"api/#coreshopt_pop","text":"Modifies current shell options based on most recent item added to stack.","title":"core.shopt_pop()"},{"location":"api/#example_3","text":"core.shopt_push -s extglob [[ 'variable' == @(foxtrot|golf|echo|variable) ]] && printf '%s\\n' 'Woof!' core.shopt_pop Function has no arguments.","title":"Example"},{"location":"api/#coreerr_set","text":"Sets an error.","title":"core.err_set()"},{"location":"api/#arguments_3","text":"$1 (Error): code $2 (Error): message","title":"Arguments"},{"location":"api/#variables-set","text":"number (ERRCODE): Error code string (ERR): Error message","title":"Variables set"},{"location":"api/#coreerr_clear","text":"Clears any of the global error state (sets to empty string). This means any core.err_exists calls after this will return 1 Function has no arguments.","title":"core.err_clear()"},{"location":"api/#variables-set_1","text":"number (ERRCODE): Error code string (ERR): Error message","title":"Variables set"},{"location":"api/#coreerr_exists","text":"Checks if an error exists. If ERR is not empty, then an error does exist Function has no arguments.","title":"core.err_exists()"},{"location":"api/#corepanic","text":"Use when a serious fault occurs. It will print the current ERR (if it exists)","title":"core.panic()"},{"location":"api/#coreprint_stacktrace","text":"Prints stacktrace","title":"core.print_stacktrace()"},{"location":"api/#example_4","text":"err_handler() { local exit_code=$? core.print_stacktrace exit $exit_code } core.trap_add 'err_handler' ERR Function has no arguments.","title":"Example"},{"location":"api/#coreprint_error_fn","text":"Print an error message to standard error","title":"core.print_error_fn()"},{"location":"api/#arguments_4","text":"$1 (string): message","title":"Arguments"},{"location":"api/#coreprint_warn_fn","text":"Print a warning message to standard error","title":"core.print_warn_fn()"},{"location":"api/#arguments_5","text":"$1 (string): message","title":"Arguments"},{"location":"api/#coreprint_info_fn","text":"Print an informative message to standard output","title":"core.print_info_fn()"},{"location":"api/#arguments_6","text":"$1 (string): message","title":"Arguments"},{"location":"api/#coreprint_die","text":"Print a error message to standard error and die","title":"core.print_die()"},{"location":"api/#arguments_7","text":"$1 (string): message","title":"Arguments"},{"location":"api/#coreprint_error","text":"Print an error message to standard error","title":"core.print_error()"},{"location":"api/#arguments_8","text":"$1 (string): message","title":"Arguments"},{"location":"api/#coreprint_warn","text":"Print a warning message to standard error","title":"core.print_warn()"},{"location":"api/#arguments_9","text":"$1 (string): message","title":"Arguments"},{"location":"api/#coreprint_info","text":"Print an informative message to standard output","title":"core.print_info()"},{"location":"api/#arguments_10","text":"$1 (string): message","title":"Arguments"},{"location":"api/#coreshould_output_color","text":"(DEPRECATED). Determine if color should be printed. Note that this doesn't use tput because simple environment variable checking heuristics suffice. Deprecated because this code has been moved to bash-std","title":"core.should_output_color()"},{"location":"api/#coreget_package_info","text":"(DEPRECATED) Gets information from a particular package. If the key does not exist, then the value is an empty string. Deprecated as this code has been moved to bash-std","title":"core.get_package_info()"},{"location":"api/#arguments_11","text":"$1 (string): The $BASALT_PACKAGE_DIR of the caller","title":"Arguments"},{"location":"api/#variables-set_2","text":"directory (string): The full path to the directory","title":"Variables set"},{"location":"api/#coreinit","text":"(DEPRECATED) Initiates global variables used by other functions. Deprecated as this function is called automatically by functions that use global variables Function has no arguments.","title":"core.init()"},{"location":"api/#corestacktrace_print","text":"(DEPRECATED) Prints stacktrace","title":"core.stacktrace_print()"},{"location":"api/#see-also","text":"core.print_stacktrace","title":"See also"}]}